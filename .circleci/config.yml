# Use the latest 2.1 version of CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1

jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.12

    working_directory: /go/src/github.com/hirsch88/go-trophy-server

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory
      - run: go get github.com/jstemmer/go-junit-report

      - restore_cache: # restores saved cache if no changes are detected since last run
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-pkg-cache

      - run:
        name: Create .env file
        command: cp .env.example .env

      - run:
        name: Install dependencies
        command: make install

      - run:
        name: Generating mock files
        command: make mock

      - run:
        name: Run unit tests
        command: |
          trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
          go test -v github.com/hirsch88/<project> | tee ${TEST_RESULTS}/go-test.out

      - run: go build -v github.com/hirsch88/go-tophy-server

      - store_artifacts:
        path: /tmp/test-results
        destination: raw-test-output

      - store_test_results:
        path: /tmp/test-results
